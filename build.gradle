buildscript {
	repositories {
		jcenter()
		mavenCentral()
	}

	dependencies {
		classpath 'org.springframework.boot:spring-boot-gradle-plugin:1.5.1.RELEASE'

		classpath 'com.bmuschko:gradle-docker-plugin:3.0.5'
	}
}

apply plugin: 'org.springframework.boot'
apply plugin: 'jacoco'
apply plugin: 'com.bmuschko.docker-remote-api'

project.version = System.properties['buildNumber'] ?: 'dev'

repositories {
	mavenCentral()

	maven {
		url 'https://artifacts.elastic.co/maven'
	}
}

configurations {
	testRuntime.exclude group: 'org.apache.logging.log4j', module: 'log4j-to-slf4j'
}

dependencies {
	compileOnly "org.projectlombok:lombok:1.16.14"

	compile 'org.springframework.boot:spring-boot-starter-web'
	compile 'org.springframework.boot:spring-boot-starter-actuator'
	compile("org.springframework.boot:spring-boot-starter-data-jpa") {
		exclude module: "spring-boot-starter-logging"
	}

	compile 'io.springfox:springfox-swagger2:2.6.1'
	compile 'io.springfox:springfox-swagger-ui:2.6.1'

	compile 'com.google.code.gson:gson:2.8.0'

	compile 'org.springframework.boot:spring-boot-starter-jdbc'
	compile 'org.flywaydb:flyway-core:4.0.3'
	runtime 'mysql:mysql-connector-java:6.0.6'

	runtime 'org.apache.logging.log4j:log4j-to-slf4j:2.8'

	compile 'org.apache.commons:commons-lang3:3.5'

	testCompile 'org.springframework.boot:spring-boot-starter-test'
	testCompile "org.projectlombok:lombok:1.16.14"

	testRuntime 'com.h2database:h2:1.4.193'

	testRuntime 'org.apache.logging.log4j:log4j-api:2.8.1'
	testRuntime 'org.apache.logging.log4j:log4j-core:2.8.1'
}

bootRun {
}

test {
	systemProperties System.properties
}

jacocoTestReport {
	afterEvaluate {
		classDirectories = files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					'**/AuthServiceApp.class',
					'**/*Configuration.class'
			])
		})
	}
}

task createDockerfile(type: com.bmuschko.gradle.docker.tasks.image.Dockerfile, dependsOn: build) {
	destFile = project.file "${project.buildDir}/Dockerfile"
	from 'openjdk:8-jdk-alpine'
	maintainer 'alcher84@gmail.com"'
	copyFile 'build/libs/', '/opt/apps/'
	exposePort 8080
	entryPoint 'java', '-jar', '-Dspring.profiles.active=production', "/opt/apps/${project.name}-${project.version}.jar"
	volume '/tmp'
}

task buildImage(type: com.bmuschko.gradle.docker.tasks.image.DockerBuildImage, dependsOn: createDockerfile) {
	dockerFile = createDockerfile.destFile
	inputDir = project.rootDir
	tag = "${project.name}:${project.version}"
	remove = true
}
